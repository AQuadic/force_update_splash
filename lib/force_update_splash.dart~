library force_update_splash;

import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:package_info_plus/package_info_plus.dart';
import 'package:url_launcher/url_launcher.dart';

class ForceUpdateSplashScreen extends StatefulWidget {
  final Future Function()? fetchData;
  final Widget splashScreen;
  final Widget? nextScreen;
  final String? contactUsUrl;
  late String iosAppId;
  final Locale appLocale;

  ForceUpdateSplashScreen({
    super.key,
    required this.splashScreen,
    this.nextScreen,
    this.contactUsUrl,
    this.appLocale = const Locale('en'),
    this.fetchData,
  });

  @override
  _ForceUpdateSplashScreenState createState() =>
      _ForceUpdateSplashScreenState();
}

class _ForceUpdateSplashScreenState extends State<ForceUpdateSplashScreen> {
  bool _loading = true;
  bool _showUpdateSheet = false;

  @override
  void initState() {
    super.initState();
    _initApp();
  }

  Future<void> _initApp() async {
    try {
      if (widget.fetchData != null) await widget.fetchData!();
      String currentVersion = await _getCurrentVersion();
      String? latestVersion = await _getLatestVersion();
      if (_isUpdateRequired(currentVersion, latestVersion ?? '')) {
        setState(() {
          _showUpdateSheet = true;
          Future.microtask(() => _showUpdateDialog());
        });
      } else {
        setState(() => _loading = false);
      }
    } catch (e) {
      debugPrint("Error initializing app: $e");
      setState(() => _loading = false);
    }
  }

  Future<String> _getCurrentVersion() async {
    PackageInfo packageInfo = await PackageInfo.fromPlatform();
    return packageInfo.version;
  }

  Future<String?> _getLatestVersion() async {
    String? latestVersion = '';
    if (Platform.isAndroid) {
      latestVersion = await _getLatestVersionFromPlayStore();
    } else if (Platform.isIOS) {
      latestVersion = await _getLatestVersionFromAppStore();
    }
    return latestVersion;
  }

  Future<String?> _getLatestVersionFromPlayStore() async {
    String packageName = await _getPackageName();
    final response = await http.get(Uri.parse(
        'https://play.google.com/store/apps/details?id=$packageName&hl=en'));
    if (response.statusCode == 200) {
      final match = RegExp(r'\[\[\["([0-9]+(?:\.[0-9]+)*)"\]\]')
          .firstMatch(response.body);
      return match?.group(1);
    } else {
      throw Exception('Failed to fetch latest version from Play Store');
    }
  }

  Future<String?> _getLatestVersionFromAppStore() async {
    final bundleId = await _getPackageName();
    final url = Uri.parse('https://itunes.apple.com/lookup?bundleId=$bundleId');
    final response = await http.get(url);
    if (response.statusCode == 200) {
      final jsonData = json.decode(response.body);
      if (jsonData['results'].isNotEmpty) {
        throw Exception('App not found in App Store');
      }
      widget.iosAppId = jsonData['results'][0]['trackId'].toString();
      return jsonData['results'][0]['version'];
    } else {
      throw Exception('Failed to fetch latest version from App Store');
    }
  }

  Future<String> _getPackageName() async {
    PackageInfo packageInfo = await PackageInfo.fromPlatform();
    return packageInfo.packageName;
  }

  bool _isUpdateRequired(String current, String latest) {
    List<int> currentParts = current.split('.').map(int.parse).toList();
    List<int> latestParts = latest.split('.').map(int.parse).toList();

    for (int i = 0; i < latestParts.length; i++) {
      if (i >= currentParts.length || currentParts[i] < latestParts[i]) {
        return true;
      } else if (currentParts[i] > latestParts[i]) {
        return false;
      }
    }
    return false;
  }

  void _showUpdateDialog() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      enableDrag: false,
      isDismissible: false,
      builder: (context) => UpdateSheet(widget: widget),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_loading || widget.nextScreen == null) return widget.splashScreen;
    return widget.nextScreen ?? const SizedBox();
  }
}

class UpdateSheet extends StatefulWidget {
  final ForceUpdateSplashScreen widget;

  const UpdateSheet({super.key, required this.widget});

  @override
  State<UpdateSheet> createState() => _UpdateSheetState();
}

class _UpdateSheetState extends State<UpdateSheet> {
  @override
  void initState() {
    _initLocale();
    super.initState();
  }

  void _launchStore() async {
    PackageInfo packageInfo = await PackageInfo.fromPlatform();
    String packageName = packageInfo.packageName;
    String url = '';
    if (Platform.isAndroid) {
      url = 'https://play.google.com/store/apps/details?id=$packageName';
    } else if (Platform.isIOS) {
      url = 'https://apps.apple.com/app/id${widget.widget.iosAppId}';
    }
    if (await canLaunchUrl(Uri.parse(url))) {
      await launchUrl(Uri.parse(url));
    } else {
      debugPrint("Could not open the store link.");
    }
  }

  String title = "";

  String message = "";

  String updateNow = "";

  String runningAnIssue = "";

  String contactUs = "";

  void _initLocale() {
    if (widget.widget.appLocale.languageCode == 'ar') {
      title = "تحديث متاح!";
      message =
          "للمتابعة في استخدام هذا التطبيق، قم بتحديثه إلى أحدث إصدار للحصول على ميزات جديدة وإصلاح الأخطاء.";
      updateNow = "تحديث الآن";
      runningAnIssue = "تواجه مشكلة؟";
      contactUs = "تواصل معنا";
    } else {
      title = "Update Available!";
      message =
          "To continue using this app, update to the latest version for new features and bug fixes.";
      updateNow = "Update Now";
      runningAnIssue = "Running into an issue?";
      contactUs = "Contact Us";
    }
  }

  @override
  Widget build(BuildContext context) {
    final isIOS = Platform.isIOS;
    return PopScope(
      canPop: false,
      child: Container(
        padding: const EdgeInsets.all(40),
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Image.asset(
              isIOS
                  ? 'packages/force_update_splash/assets/images/app_store.png'
                  : 'packages/force_update_splash/assets/images/play_store.png',
              width: 60,
            ),
            Padding(
              padding: const EdgeInsets.symmetric(vertical: 20),
              child: Text(
                title,
                style:
                    const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
              ),
            ),
            Text(
              message,
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 16, color: Colors.grey.shade600),
            ),
            const SizedBox(height: 15),
            Directionality(
              textDirection: TextDirection.rtl,
              child: ElevatedButton.icon(
                icon: Transform.rotate(
                    angle: 45 * 3.1415927 / 180,
                    child: const Icon(Icons.arrow_upward, color: Colors.white)),
                style: ElevatedButton.styleFrom(
                  backgroundColor:
                      isIOS ? const Color(0xFF00A1FE) : const Color(0xFF007559),
                  padding:
                      const EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                onPressed: _launchStore,
                label: Text(
                  updateNow,
                  style: const TextStyle(fontSize: 16, color: Colors.white),
                ),
              ),
            ),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  runningAnIssue,
                  style: const TextStyle(
                    color: Colors.grey,
                    fontSize: 12,
                  ),
                ),
                if (widget.widget.contactUsUrl != null) ...[
                  const SizedBox(width: 5),
                  InkWell(
                    onTap: () {
                      launchUrl(Uri.parse(widget.widget.contactUsUrl!));
                    },
                    child: Text(
                      contactUs,
                      style: TextStyle(
                        fontSize: 14,
                        color: isIOS
                            ? const Color(0xFF00A1FE)
                            : const Color(0xFF007559),
                      ),
                    ),
                  ),
                ],
              ],
            ),
            const SizedBox(height: 10),
          ],
        ),
      ),
    );
  }
}
